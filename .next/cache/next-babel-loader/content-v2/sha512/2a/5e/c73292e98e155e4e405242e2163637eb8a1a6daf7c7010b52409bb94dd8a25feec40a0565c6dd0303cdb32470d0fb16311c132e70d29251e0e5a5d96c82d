{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\"; // import { composeWithDevTools } from 'redux-devtools-extension'\n\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport reducers from \"./reducers\";\nlet store;\n\nfunction initStore(initialState) {\n  return createStore(reducers, initialState, // composeWithDevTools(applyMiddleware(thunkMiddleware))\n  applyMiddleware(thunkMiddleware, logger));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["F:/xampp/htdocs/arkademy/Zwallet/zwallet/configs/redux/index.js"],"names":["useMemo","createStore","applyMiddleware","logger","thunkMiddleware","reducers","store","initStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C,C,CACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAIC,KAAJ;;AAEA,SAASC,SAAT,CAAmBC,YAAnB,EAAiC;AAC7B,SAAOP,WAAW,CACdI,QADc,EAEdG,YAFc,EAGd;AACAN,EAAAA,eAAe,CAACE,eAAD,EAAkBD,MAAlB,CAJD,CAAlB;AAMH;;AAED,OAAO,MAAMM,eAAe,GAAIC,cAAD,IAAoB;AAAA;;AAC/C,MAAIC,MAAM,cAAGL,KAAH,6CAAYC,SAAS,CAACG,cAAD,CAA/B,CAD+C,CAG/C;AACA;;;AACA,MAAIA,cAAc,IAAIJ,KAAtB,EAA6B;AACzBK,IAAAA,MAAM,GAAGJ,SAAS,iCACXD,KAAK,CAACM,QAAN,EADW,GAEXF,cAFW,EAAlB,CADyB,CAKzB;;AACAJ,IAAAA,KAAK,GAAGO,SAAR;AACH,GAZ8C,CAc/C;;;AACA,YAAmC,OAAOF,MAAP,CAfY,CAgB/C;;AACA,MAAI,CAACL,KAAL,EAAYA,KAAK,GAAGK,MAAR;AAEZ,SAAOA,MAAP;AACH,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAgC;AACnC,QAAMF,KAAK,GAAGN,OAAO,CAAC,MAAMS,eAAe,CAACD,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOF,KAAP;AACH","sourcesContent":["import { useMemo } from \"react\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n// import { composeWithDevTools } from 'redux-devtools-extension'\r\nimport logger from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport reducers from \"./reducers\";\r\n\r\nlet store;\r\n\r\nfunction initStore(initialState) {\r\n    return createStore(\r\n        reducers,\r\n        initialState,\r\n        // composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n        applyMiddleware(thunkMiddleware, logger)\r\n    );\r\n}\r\n\r\nexport const initializeStore = (preloadedState) => {\r\n    let _store = store ?? initStore(preloadedState);\r\n\r\n    // After navigating to a page with an initial Redux state, merge that state\r\n    // with the current state in the store, and create a new store\r\n    if (preloadedState && store) {\r\n        _store = initStore({\r\n            ...store.getState(),\r\n            ...preloadedState,\r\n        });\r\n        // Reset the current store\r\n        store = undefined;\r\n    }\r\n\r\n    // For SSG and SSR always create a new store\r\n    if (typeof window === \"undefined\") return _store;\r\n    // Create the store once in the client\r\n    if (!store) store = _store;\r\n\r\n    return _store;\r\n};\r\n\r\nexport function useStore(initialState) {\r\n    const store = useMemo(() => initializeStore(initialState), [initialState]);\r\n    return store;\r\n}"]},"metadata":{},"sourceType":"module"}