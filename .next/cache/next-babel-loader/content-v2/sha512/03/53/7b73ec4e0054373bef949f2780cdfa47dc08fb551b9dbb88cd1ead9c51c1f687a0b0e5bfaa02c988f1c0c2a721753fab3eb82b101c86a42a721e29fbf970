{"ast":null,"code":"import axios from \"axios\";\nimport axiosApiInstance from \"../../../helper/axios\";\nimport Swal from \"sweetalert2\";\n\nconst signUpRequest = () => {\n  return {\n    type: \"SIGN_UP_REQUEST\"\n  };\n};\n\nconst signUpSuccess = data => {\n  return {\n    type: \"SIGN_UP_SUCCESS\",\n    payload: data\n  };\n};\n\nconst signUpFailure = error => {\n  return {\n    type: \"SIGN_UP_FAILURE\",\n    payload: error\n  };\n};\n\nexport const signUp = data => dispatch => {\n  return new Promise((resolve, reject) => {\n    const Url = process.env.api;\n    dispatch(signUpRequest());\n    axios.post(`${Url}/users/`, data).then(res => {\n      dispatch(signUpSuccess(res.data.data));\n      resolve(res.data.message);\n    }).catch(err => {\n      dispatch(signUpFailure(err.response.data.message));\n      reject(new Error(err.response.data.message));\n    });\n  });\n};\nexport const verify = () => dispatch => {\n  return new Promise((resolve, reject) => {\n    const Url = process.env.api;\n    axiosApiInstance.get(`${Url}/users/verify`).then(res => {\n      resolve(res.data.message);\n    }).catch(err => {\n      reject(new Error(err.response.data.message));\n    });\n  });\n};\nexport const login = data => dispatch => {\n  return new Promise((resolve, reject) => {\n    const Url = process.env.api;\n    axios.post(`${Url}/users/auth/login`, data).then(res => {\n      dispatch({\n        type: \"LOGIN\",\n        payload: res.data.data,\n        role: res.data.data.role,\n        status: true\n      });\n      localStorage.setItem(\"id\", res.data.data.id);\n      localStorage.setItem(\"token\", res.data.data.token);\n      resolve(res.data.message);\n    }).catch(err => {\n      if (err.response) {\n        reject(err.response.data.message);\n      } else {\n        Swal.fire(\"Internal Server Error!.\", \"\", \"error\");\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}