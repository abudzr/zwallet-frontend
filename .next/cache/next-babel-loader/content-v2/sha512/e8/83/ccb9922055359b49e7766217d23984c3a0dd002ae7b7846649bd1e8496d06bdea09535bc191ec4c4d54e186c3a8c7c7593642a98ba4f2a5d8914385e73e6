{"ast":null,"code":"const axios = require(\"axios\");\n\nconst axiosApiInstance = axios.create(); // const Swal = require(\"sweetalert2\");\n//ambil token dari localstorage\n\nlet token;\n\nif (false) {\n  token = localStorage.getItem(\"token\");\n}\n\naxiosApiInstance.interceptors.request.use(async config => {\n  config.headers = {\n    Authorization: `Bearer ${token}`\n  };\n  return config;\n}, error => {\n  Promise.reject(error);\n});\naxiosApiInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  if (error.response.status === 400) {\n    if (error.response.data.message === \"Invalid Token\") {\n      return Promise.reject(error);\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosApiInstance;","map":{"version":3,"sources":["F:/xampp/htdocs/arkademy/Zwallet/zwallet/helper/axios.js"],"names":["axios","require","axiosApiInstance","create","token","localStorage","getItem","interceptors","request","use","config","headers","Authorization","error","Promise","reject","response","status","data","message"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,gBAAgB,GAAGF,KAAK,CAACG,MAAN,EAAzB,C,CACA;AAEA;;AACA,IAAIC,KAAJ;;AACA,WAAqB;AACjBA,EAAAA,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAR;AACH;;AAEDJ,gBAAgB,CAACK,YAAjB,CAA8BC,OAA9B,CAAsCC,GAAtC,CACI,MAAOC,MAAP,IAAkB;AACdA,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACbC,IAAAA,aAAa,EAAG,UAASR,KAAM;AADlB,GAAjB;AAGA,SAAOM,MAAP;AACH,CANL,EAOKG,KAAD,IAAW;AACPC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACH,CATL;AAYAX,gBAAgB,CAACK,YAAjB,CAA8BS,QAA9B,CAAuCP,GAAvC,CACKO,QAAD,IAAc;AACV,SAAOA,QAAP;AACH,CAHL,EAII,gBAAgBH,KAAhB,EAAuB;AACnB,MAAIA,KAAK,CAACG,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AAC/B,QAAIJ,KAAK,CAACG,QAAN,CAAeE,IAAf,CAAoBC,OAApB,KAAgC,eAApC,EAAqD;AACjD,aAAOL,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH;AACJ;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAXL;AAcA,eAAeX,gBAAf","sourcesContent":["const axios = require(\"axios\");\r\nconst axiosApiInstance = axios.create();\r\n// const Swal = require(\"sweetalert2\");\r\n\r\n//ambil token dari localstorage\r\nlet token;\r\nif (process.browser) {\r\n    token = localStorage.getItem(\"token\");\r\n}\r\n\r\naxiosApiInstance.interceptors.request.use(\r\n    async (config) => {\r\n        config.headers = {\r\n            Authorization: `Bearer ${token}`,\r\n        };\r\n        return config;\r\n    },\r\n    (error) => {\r\n        Promise.reject(error);\r\n    }\r\n);\r\n\r\naxiosApiInstance.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    async function (error) {\r\n        if (error.response.status === 400) {\r\n            if (error.response.data.message === \"Invalid Token\") {\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosApiInstance;"]},"metadata":{},"sourceType":"module"}